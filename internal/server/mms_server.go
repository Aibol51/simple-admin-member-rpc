// Code generated by goctl. DO NOT EDIT.
// Source: mms.proto

package server

import (
	"context"

	"github.com/suyuan32/simple-admin-member-rpc/internal/logic/base"
	"github.com/suyuan32/simple-admin-member-rpc/internal/logic/member"
	"github.com/suyuan32/simple-admin-member-rpc/internal/logic/memberrank"
	"github.com/suyuan32/simple-admin-member-rpc/internal/svc"
	"github.com/suyuan32/simple-admin-member-rpc/types/mms"
)

type MmsServer struct {
	svcCtx *svc.ServiceContext
	mms.UnimplementedMmsServer
}

func NewMmsServer(svcCtx *svc.ServiceContext) *MmsServer {
	return &MmsServer{
		svcCtx: svcCtx,
	}
}

func (s *MmsServer) InitDatabase(ctx context.Context, in *mms.Empty) (*mms.BaseResp, error) {
	l := base.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

// Member management
func (s *MmsServer) CreateMember(ctx context.Context, in *mms.MemberInfo) (*mms.BaseUUIDResp, error) {
	l := member.NewCreateMemberLogic(ctx, s.svcCtx)
	return l.CreateMember(in)
}

func (s *MmsServer) UpdateMember(ctx context.Context, in *mms.MemberInfo) (*mms.BaseResp, error) {
	l := member.NewUpdateMemberLogic(ctx, s.svcCtx)
	return l.UpdateMember(in)
}

func (s *MmsServer) GetMemberList(ctx context.Context, in *mms.MemberListReq) (*mms.MemberListResp, error) {
	l := member.NewGetMemberListLogic(ctx, s.svcCtx)
	return l.GetMemberList(in)
}

func (s *MmsServer) DeleteMember(ctx context.Context, in *mms.UUIDsReq) (*mms.BaseResp, error) {
	l := member.NewDeleteMemberLogic(ctx, s.svcCtx)
	return l.DeleteMember(in)
}

func (s *MmsServer) GetMemberById(ctx context.Context, in *mms.UUIDReq) (*mms.MemberInfo, error) {
	l := member.NewGetMemberByIdLogic(ctx, s.svcCtx)
	return l.GetMemberById(in)
}

func (s *MmsServer) GetMemberByUsername(ctx context.Context, in *mms.UsernameReq) (*mms.MemberInfo, error) {
	l := member.NewGetMemberByUsernameLogic(ctx, s.svcCtx)
	return l.GetMemberByUsername(in)
}

// MemberRank management
func (s *MmsServer) CreateMemberRank(ctx context.Context, in *mms.MemberRankInfo) (*mms.BaseIDResp, error) {
	l := memberrank.NewCreateMemberRankLogic(ctx, s.svcCtx)
	return l.CreateMemberRank(in)
}

func (s *MmsServer) UpdateMemberRank(ctx context.Context, in *mms.MemberRankInfo) (*mms.BaseResp, error) {
	l := memberrank.NewUpdateMemberRankLogic(ctx, s.svcCtx)
	return l.UpdateMemberRank(in)
}

func (s *MmsServer) GetMemberRankList(ctx context.Context, in *mms.MemberRankListReq) (*mms.MemberRankListResp, error) {
	l := memberrank.NewGetMemberRankListLogic(ctx, s.svcCtx)
	return l.GetMemberRankList(in)
}

func (s *MmsServer) GetMemberRankById(ctx context.Context, in *mms.IDReq) (*mms.MemberRankInfo, error) {
	l := memberrank.NewGetMemberRankByIdLogic(ctx, s.svcCtx)
	return l.GetMemberRankById(in)
}

func (s *MmsServer) DeleteMemberRank(ctx context.Context, in *mms.IDsReq) (*mms.BaseResp, error) {
	l := memberrank.NewDeleteMemberRankLogic(ctx, s.svcCtx)
	return l.DeleteMemberRank(in)
}
